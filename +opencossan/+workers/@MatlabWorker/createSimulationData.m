function XsimOut = createSimulationData(Xmio,Poutput)

import opencossan.common.outputs.SimulationData

switch class(Poutput)
    case 'double'
        % check that the number of returned quantities is correct
        assert(size(Poutput,2)==length(Xmio.OutputNames),...
            'OpenCossanMatlabWorker:WrongNumberOfOutputDouble',...
            ['Wrong number of outputs returned by script/function.\n'... 
            'Nr. of required outputs: %d\n'...
            'Nr. of columns of output matrix: %d'],...
            length(Xmio.OutputNames),size(Poutput,2))
        % create the simulation data
        XsimOut    = SimulationData('Cnames',Xmio.OutputNames,'Mvalues',Poutput);
    case 'struct'
        % check that all the required outputs are available as field of the
        % output structure
        Cnames = fieldnames(Poutput);
        assert(all(ismember(Xmio.OutputNames,Cnames)),...
            'OpenCossan:MatlabWorker:WrongNumberOfOutputStructure',...
            ['Not all the necessary outputs are contained in the output structure.\n'...
            'Missing outputs: %s'], ...
            sprintf('%s\n',Xmio.OutputNames{~ismember(Xmio.OutputNames,Cnames)}))
        
        % check that no empty values are returned into the structure
        for ifield=1:length(Cnames)
            Ctemp = {Poutput.(Cnames{ifield})};
            LemptyCell = cellfun('isempty',Ctemp);
            assert(~any(LemptyCell),...
                'OpenCossan:MatlabWorker:createSimulationOutput',...
                ['Output of name %s returned an empty quantity for samples %s.\n',...
                'Please ensure that your script or function alway return non-empty quantities.'],...
                Cnames{ifield},num2str(find(LemptyCell),'%d,'))
        end
        XsimOut    = SimulationData('Table',struct2table(Poutput));
    case 'table'
        % create the simulation data
        XsimOut    = SimulationData('Table',Poutput);
    otherwise
        error('OpenCossan:MatlabWorker:unsupportedType',...
            'Unsupported output from MatlabWorker of type %s', class(Poutput))
end

%% Check Outputs
for n=1:length(Xmio.OutputNames)
    assert(any(strcmp(XsimOut.Cnames,Xmio.OutputNames(n))), ...
        'openCOSSAN:connectors:mio',...
        ['Output variable ' Xmio.OutputNames{n} ...
        ' not created by the Mio script (' Xmio.Description ')'] )
end

%% Export results
XsimOut.Sdescription = 'generated by: run(@MatlabWorker)';   %Sets description of Output object

end
